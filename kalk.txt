import java.util.Scanner;
public class Main {
    public static void main(String[] args) throws Exception { // Может выбросить исключение типа Exception.
        System.out.print("Input:\n");
        Scanner console = new Scanner(System.in);
        String input = console.nextLine();
        System.out.println("Output:\n" + calc(input));
    }

    private static String calc(String input) throws Exception {
        Konvert konvert = new Konvert();
        String[] operation = {"+", "-", "*", "/"};
        String[] regexOperation = {"\\+", "\\-", "\\*", "\\/"};

        int j = 0;
        for (int i = 0; i < operation.length; i++) {
            if (input.contains(operation[i])) {
                j = i;
                break;
            }
        }
        String[] num = input.split(regexOperation[j]);
        if (num.length != 2) {
            throw new Exception("т.к. формат математической операции не удовлетворяет заданию - два операнда и один оператор (+, -, /, *)");
        }

        if (j > 2) { // Если операций будет больше 2, то Exception
            throw new Exception("т.к. строка не является математической операцией");
        }

        int a, b;
        if (konvert.isRoman(num[0]) == konvert.isRoman(num[1])) {
            boolean isRoman = konvert.isRoman(num[0]);
            if (isRoman) {
                a = konvert.romanToInt(num[0]);
                b = konvert.romanToInt(num[1]);
            }
            else {
                a = Integer.parseInt(num[0]);
                b = Integer.parseInt(num[1]);
            }

            int res;
            if ((a > 0 && b > 0) && (a <= 10 && b <= 10)) {
                switch (operation[j]) {
                    case "+":
                        res = (a + b);
                        break;
                    case "-":
                        res = (a - b);
                        break;
                    case "*":
                        res = (a * b);
                        break;
                    default:
                        res = (a / b);
                        break;
                }

                if (isRoman) {
                    if (res > 0) {
                        return String.valueOf((konvert.intToRoman(res)));
                    }
                    else throw new Exception("т.к. в римской системе нет отрицательных чисел");
                }
                else {
                    return String.valueOf(res);
                }
            }
            else throw new Exception("Калькулятор должен принимать на вход числа от 1 до 10 включительно, не более.");
        }
        else throw new Exception("т.к. используются одновременно разные системы счисления");
    }
}

import java.util.TreeMap;

public class Konvert {
    TreeMap<Character, Integer> romeKeyMap = new TreeMap<>();
    TreeMap<Integer, String> arabKeyMap = new TreeMap<>();

    public Konvert() {
        romeKeyMap.put('I', 1);
        romeKeyMap.put('V', 5);
        romeKeyMap.put('X', 10);
        romeKeyMap.put('L', 50);
        romeKeyMap.put('C', 100);

        arabKeyMap.put(1, "I");
        arabKeyMap.put(5, "V");
        arabKeyMap.put(10, "X");
        arabKeyMap.put(50, "L");
        arabKeyMap.put(100, "C");

    }

    public boolean isRoman(String num) {
        for (int i = 0; i < num.length(); i++) {
            if (!romeKeyMap.containsKey(num.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    public String intToRoman(int num) {
        String roman = "";
       

        do {
            arabKey = arabKeyMap.floorKey(num);
            num -= arabKey;

        } while (num != 0);
        return roman;
    }

    public int romanToInt(String str) {
        int end = str.length() - 1;
        char[] array = str.toCharArray();
        int arab;
        int result = romeKeyMap.get(array[end]);
        for (int i = end - 1; i >= 0; i--) {
            arab = romeKeyMap.get(array[i]);
            if (arab < romeKeyMap.get(array[i + 1])) {
                result -= arab;
            } else {
                result += arab;
            }
        }
        return result;
    }
}